// ============================================================================
// HolmesNyangz Unified Database Schema
// ============================================================================
// 생성일: 2025-10-17
// 목적: 채팅(메모리) + 부동산 통합 스키마
//
// 구조:
// - Part 1: 채팅 & 메모리 (Chat + LangGraph)
// - Part 2: 부동산 데이터 (Real Estate)
// ============================================================================

// ============================================================================
// Part 1: 채팅 & 메모리 시스템
// ============================================================================

// 1-1. 기본 사용자 (인증 미구현, user_id=1 고정)
Table users {
  id serial [pk]
  email varchar(200) [not null, unique]
  type varchar(20) [not null, default: 'user']
  is_active boolean [default: true]
  created_at timestamp [default: `now()`]
  updated_at timestamp

  Note: '기본 사용자 (채팅용, user_id=1 고정 사용)'
}

// 1-2. 채팅 세션
Table chat_sessions {
  session_id varchar(100) [pk, note: 'Session ID (session-{uuid} 형식)']
  user_id integer [not null, default: 1, ref: > users.id, note: 'User ID (기본값: 1)']
  title varchar(200) [not null, default: '새 대화', note: '세션 제목']
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  last_message text [note: '마지막 메시지 미리보기']
  message_count integer [default: 0]
  is_active boolean [default: true]
  metadata jsonb

  indexes {
    user_id
    updated_at
    (user_id, updated_at)
  }

  Note: '''
  채팅 세션 (대화 스레드)
  - session_id: "session-{uuid}" 형식
  - WebSocket 연결 식별자
  - updated_at: 트리거로 자동 갱신
  '''
}

// 1-3. 채팅 메시지
Table chat_messages {
  id serial [pk]
  session_id varchar(100) [not null, ref: > chat_sessions.session_id, note: 'CASCADE DELETE']
  role varchar(20) [not null, note: 'user | assistant | system']
  content text [not null]
  structured_data jsonb [note: 'UI 표시용 구조화 데이터']
  created_at timestamp [not null, default: `now()`]

  indexes {
    session_id
    (session_id, created_at)
  }

  Note: '채팅 메시지 히스토리 (UI 표시용)'
}

// 1-4. LangGraph Checkpoints
Table checkpoints {
  session_id text [not null]
  checkpoint_ns text [not null, default: '']
  checkpoint_id text [not null]
  parent_checkpoint_id text
  type text
  checkpoint jsonb [not null]
  metadata jsonb [not null, default: `{}`]

  indexes {
    session_id
    (session_id, checkpoint_ns, checkpoint_id) [pk]
  }

  Note: 'LangGraph 상태 스냅샷'
}

Table checkpoint_blobs {
  session_id text [not null]
  checkpoint_ns text [not null, default: '']
  channel text [not null]
  version text [not null]
  type text [not null]
  blob bytea

  indexes {
    (session_id, checkpoint_ns, channel, version) [pk]
  }

  Note: 'LangGraph 바이너리 데이터'
}

Table checkpoint_writes {
  session_id text [not null]
  checkpoint_ns text [not null, default: '']
  checkpoint_id text [not null]
  task_id text [not null]
  idx integer [not null]
  channel text [not null]
  type text
  blob bytea [not null]

  indexes {
    session_id
    (session_id, checkpoint_ns, checkpoint_id, task_id, idx) [pk]
  }

  Note: 'LangGraph 증분 업데이트'
}

Table checkpoint_migrations {
  v integer [pk]
  Note: 'LangGraph 스키마 버전'
}

// ============================================================================
// Part 2: 부동산 데이터 시스템
// ============================================================================

// 2-1. 지역 정보
Table regions {
  id serial [pk]
  code varchar(20) [not null, unique, note: '법정동코드']
  name varchar(50) [not null, note: '지역명']
  created_at timestamp [default: `now()`]
  updated_at timestamp

  Note: '지역 정보 (법정동 기준)'
}

// 2-2. 부동산 매물
Table real_estates {
  id serial [pk]
  property_type varchar(20) [not null, note: 'apartment | officetel | villa | oneroom | house']
  code varchar(30) [not null, unique, note: '단지코드/매물코드']
  name varchar(100) [not null, note: '단지명/건물명']
  region_id integer [not null, ref: > regions.id]

  // 주소
  address varchar(255) [not null]
  address_detail varchar(255)]
  latitude decimal(10,7)
  longitude decimal(10,7)

  // 건물 정보
  total_households integer
  total_buildings integer
  completion_date varchar(6)

  // 면적
  min_exclusive_area float
  max_exclusive_area float
  representative_area float
  floor_area_ratio float
  exclusive_area float
  supply_area float
  exclusive_area_pyeong float
  supply_area_pyeong float

  // 기타
  direction varchar(20)
  floor_info varchar(50)
  building_description text
  tag_list "varchar[]"

  // 매물 수
  deal_count integer
  lease_count integer
  rent_count integer
  short_term_rent_count integer

  created_at timestamp [default: `now()`]
  updated_at timestamp

  indexes {
    code [unique]
  }

  Note: '부동산 매물 정보'
}

// 2-3. 거래 정보
Table transactions {
  id serial [pk]
  real_estate_id integer [not null, ref: > real_estates.id, note: 'CASCADE DELETE']
  region_id integer [not null, ref: > regions.id]
  transaction_type varchar(20) [note: 'sale | jeonse | rent']
  transaction_date timestamp

  // 가격 (만원)
  sale_price integer
  deposit integer
  monthly_rent integer

  // 가격 범위 (만원)
  min_sale_price integer
  max_sale_price integer
  min_deposit integer
  max_deposit integer
  min_monthly_rent integer
  max_monthly_rent integer

  article_no varchar(50) [unique]
  article_confirm_ymd varchar(10)

  created_at timestamp [default: `now()`]
  updated_at timestamp

  indexes {
    article_no [unique]
    transaction_date
    (real_estate_id, transaction_date)
    (transaction_date, transaction_type)
  }

  Note: '거래 정보 (매매, 전세, 월세)'
}

// 2-4. 주변 시설
Table nearby_facilities {
  id serial [pk]
  real_estate_id integer [not null, ref: > real_estates.id, note: 'CASCADE DELETE']

  // 지하철
  subway_line varchar(50)
  subway_distance integer
  subway_walking_time integer

  // 학교
  elementary_schools text
  middle_schools text
  high_schools text

  created_at timestamp [default: `now()`]

  Note: '주변 시설 정보 (지하철, 학교)'
}

// 2-5. 중개사 정보
Table real_estate_agents {
  id serial [pk]
  real_estate_id integer [not null, ref: > real_estates.id, note: 'CASCADE DELETE']
  name varchar(100)
  address varchar(255)
  phone varchar(20)
  created_at timestamp [default: `now()`]
  updated_at timestamp

  Note: '부동산 중개사 정보'
}

// 2-6. 신뢰도 점수
Table trust_scores {
  id serial [pk]
  real_estate_id integer [not null, unique, ref: - real_estates.id, note: 'CASCADE DELETE']
  score decimal(3,2) [note: '0.00-1.00']
  data_quality integer
  transaction_activity integer
  price_stability integer
  calculated_at timestamp [default: `now()`]

  Note: '부동산 신뢰도 점수'
}

// ============================================================================
// Foreign Key 관계 요약
// ============================================================================

// 채팅 관련:
// - chat_sessions.user_id → users.id (N:1)
// - chat_messages.session_id → chat_sessions.session_id (N:1, CASCADE DELETE)

// 부동산 관련:
// - real_estates.region_id → regions.id (N:1)
// - transactions.real_estate_id → real_estates.id (N:1, CASCADE DELETE)
// - transactions.region_id → regions.id (N:1)
// - nearby_facilities.real_estate_id → real_estates.id (N:1, CASCADE DELETE)
// - real_estate_agents.real_estate_id → real_estates.id (N:1, CASCADE DELETE)
// - trust_scores.real_estate_id → real_estates.id (1:1, CASCADE DELETE)

// Checkpoint 관련:
// - checkpoints.session_id → chat_sessions.session_id (암묵적, FK 제약 없음)

// ============================================================================
// 통합 세션 ID 개념
// ============================================================================

// 모든 채팅/체크포인트 테이블이 동일한 session_id 사용:
//
//    chat_sessions.session_id      = "session-{uuid}"
//    chat_messages.session_id      = "session-{uuid}"
//    checkpoints.session_id        = "session-{uuid}"
//    checkpoint_blobs.session_id   = "session-{uuid}"
//    checkpoint_writes.session_id  = "session-{uuid}"
//
// 장점:
//   - 혼동 방지
//   - 쉬운 JOIN
//   - 직관적
